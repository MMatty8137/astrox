(začátek 125)
        #we calculate the angle of movemment of "things" on photo
        delta_x = abs(delta_x)
        delta_y = abs(delta_y)
        if delta_x != 0:
            tangens_angle_for_general_direction_radians = np.arctan((delta_y)/(delta_x))
            tangens_angle_for_general_direction_degrees = tangens_angle_for_general_direction_radians * (360/(2*np.pi))
        else:
            if delta_x == delta_y:
                tangens_angle_for_general_direction_radians = np.arctan(1)
                tangens_angle_for_general_direction_degrees = tangens_angle_for_general_direction_radians * (360/(2*np.pi))
            else:
                tangens_angle_for_general_direction_radians = np.arctan((delta_y)/(delta_x+0.0000001))
                tangens_angle_for_general_direction_degrees = tangens_angle_for_general_direction_radians * (360/(2*np.pi))

        return coordinates_1, coordinates_2, tangens_angle_for_general_direction_degrees
    
    #getting latitude of both images from EXIF data
    def get_latitude(image):
        with open(image, 'rb') as image_file:
            img = Image(image_file)
            if img.has_exif:
                try:
                    latitude = img.get("gps_latitude")
                    latitude_ref = img.get("gps_latitude_ref")
                    if latitude == None:
                        latitude, latitude_ref = (0.0, 0.0, 0.0), "A"
                except AttributeError:
                    latitude, latitude_ref = (0.0, 0.0, 0.0), "A"
            else:
                latitude, latitude_ref = (0.0, 0.0, 0.0), "A"
        return latitude, latitude_ref
    
    #converting latitude to decimal
    def get_decimal_latitude(latitude, latitude_ref):
        decimal_degrees = latitude[0] + latitude[1] / 60 + latitude[2] / 3600
        if latitude_ref == "S" or latitude_ref == "W":
            decimal_degrees = -decimal_degrees
        return decimal_degrees

    #getting latitude for using
    def get_latitudes(image_1, image_2):    
        latitude_image_1_x, latitude_image_1_ref = get_latitude(image_1)
        latitude_image_1 = get_decimal_latitude(latitude_image_1_x, latitude_image_1_ref)
        latitude_image_2_x, latitude_image_2_ref = get_latitude(image_2)
        latitude_image_2 = get_decimal_latitude(latitude_image_2_x, latitude_image_2_ref)
        return latitude_image_1, latitude_image_2

    #latitude_image_1 = -43.88975 #latitude před procesem
    #latitude_image_2 = -44.18364 #latitude po procesu
    #latitude_image_1 = 1 #latitude před procesem
    #latitude_image_2 = -1 #latitude po procesu
    #latitude_image_1 = -13.12361 #latitude před procesem madagaskar
    #latitude_image_2 = -12.67333 #latitude po procesu madagaskar
    #latitude_image_1 = -25.49306 #latitude před procesem namibie
    #latitude_image_2 = -25.07194 #latitude po procesu namibie
    #latitude_image_1 = 51.61778 #latitude switzerland
    #latitude_image_2 = 51.55894 #latitude switzerland


    #latitude_image_1 = -21.26222 #latitude namibie 1
    #latitude_image_1 = -20.82889 #latitude namibie 2
    #latitude_image_2 = -20.39417 #latitude namibie 3

    #using defined functions
    latitude_image_1, latitude_image_2 = get_latitudes(image_1, image_2)
    time_difference = get_time_difference(image_1, image_2) 
    image_1_cv, image_2_cv = convert_to_cv(image_1, image_2) 
    keypoints_1, keypoints_2, descriptors_1, descriptors_2 = calculate_features(image_1_cv, image_2_cv, 1000) 
    matches = calculate_matches(descriptors_1, descriptors_2)
    display_matches(image_1_cv, keypoints_1, image_2_cv, keypoints_2, matches)
    coordinates_1, coordinates_2, tangens_angle_for_general_direction_degrees = find_matching_coordinates(keypoints_1, keypoints_2, matches)

    tangens_angle_for_general_direction_degrees = abs(tangens_angle_for_general_direction_degrees)

    #calculating the relative rotation of camera on ISS
    edoov_coefficient = ""
    if direction_x == "left":
        if direction_y == "up":
            edoov_coefficient = (tangens_angle_for_general_direction_degrees, -1, -1, "↖")
            clockwise_edoov_coefficient = 270-tangens_angle_for_general_direction_degrees
        if direction_y == "down":
            edoov_coefficient = (tangens_angle_for_general_direction_degrees, -1, 1,"↙")
            clockwise_edoov_coefficient = 270+tangens_angle_for_general_direction_degrees
    if direction_x == "right":
        if direction_y == "up":
            edoov_coefficient = (tangens_angle_for_general_direction_degrees, 1, -1, "↗")
            clockwise_edoov_coefficient = 90+tangens_angle_for_general_direction_degrees
        if direction_y == "down":
            edoov_coefficient = (tangens_angle_for_general_direction_degrees, 1, 1, "↘")
            clockwise_edoov_coefficient = 90-tangens_angle_for_general_direction_degrees
    try:
        list.add_clockwise_edoov_coefficient(clockwise_edoov_coefficient)
    except:
        pass
    median_clockwise_edoov_coefficient=list.get_median()
    #averaging latitudes for more accurate calculation 
    latitude_avg = (latitude_image_1+latitude_image_2)/2

